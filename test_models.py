import tensorflow as tf
import numpy as np
import os

# ===== ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö =====
MODELS = [
    "models/eyes_effv2_new.keras",
    "models/mouth_effv2_new.keras",
    "models/head_effv2_new.keras",
]

print("üß† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•...\n")

for path in MODELS:
    if not os.path.exists(path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {path}")
        continue

    print(f"üîπ Loading model: {path}")
    model = tf.keras.models.load_model(path, compile=False)

    # ‡∏î‡∏∂‡∏á input shape
    shape = model.input_shape
    h, w, c = shape[1:]
    print(f"   ‚Ü≥ Input shape: ({h}, {w}, {c})")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á (random noise) ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    dummy = np.random.rand(1, h, w, c).astype("float32")

    # ‡∏£‡∏±‡∏ô predict
    pred = model.predict(dummy, verbose=0)
    print(f"   ‚Ü≥ Output shape: {pred.shape}")
    print(f"   ‚Ü≥ Output preview: {pred.flatten()[:5]}\n")

print("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
